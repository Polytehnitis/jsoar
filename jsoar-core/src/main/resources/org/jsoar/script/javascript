// Initialization script run for the javascript engine.
// Performs additional initialization that's easier to do in straight
// javascript than through the Java scripting API.

soar = (_soar.getAgent() instanceof Java.type('org.jsoar.kernel.Agent')) ? new (function(agent) {

  var INPUT_EVENT = "org.jsoar.kernel.events.InputEvent";
  var OUTPUT_EVENT = "org.jsoar.kernel.events.OutputEvent";
  
  var Symbols = Java.type('org.jsoar.kernel.symbols.Symbols');
  var InputWmes = Java.type('org.jsoar.kernel.io.InputWmes');
  var RhsFunctionHandler = Java.extend(Java.type('org.jsoar.kernel.rhs.functions.RhsFunctionHandler'));
  var SoarEventListenerProxy = Java.type('org.jsoar.util.events.SoarEventListenerProxy');
  var Integer = Java.type('java.lang.Integer');
  var Long = Java.type('java.lang.Long');

  var io = agent.getInputOutput();
  
  // Remember all listeners we register so we can remove them
  // when the script engine is disposed.
  var disposers = [];
  
  function dispose() {
    disposers.forEach( d => d() );
  }
  
  // General event registration handler (see below)
  function onEvent(eventClass, callback) {
    if(typeof(eventClass) === "string") {
      eventClass = Java.type(eventClass);
    }
    var proxy = new SoarEventListenerProxy(callback);
    agent.getEvents().addListener(eventClass, proxy);
    
    var disposer = function() {
      agent.getEvents().removeListener(eventClass, proxy);
    }
    disposers.unshift(disposer); // add to front so disposed in reverse
    return disposer;
  };
  
  // Convert a WME structure to a JavaScript object (see below)
  function toJavaScript(root) {
    var result = {};
    var i = root.getWmes();
    while(i.hasNext()) {
      var wme = i.next();
      var attr = wme.getAttribute().toString();
      var value = wme.getValue();
      if(value.asIdentifier() !== null) {
        result[attr] = toJavaScript(value);
      }
      else {
        result[attr] = Symbols.valueOf(value);
      }
    }
    return result;
  }
  
  // Check if an object is an array. Thanks Douglas Crockford.
  function isArray(testObject) {   
    return testObject && 
          !(testObject.propertyIsEnumerable('length')) && 
          typeof testObject === 'object' && 
          typeof testObject.length === 'number';
  }
  
  function isJava(o) { return o !== undefined && o !== null && o.getClass; }
  
  // Convert a JavaScript object to WMEs (see below)
  function fromJavaScript(root, letter) {
    var id = soar.wmes.newId(letter || "Z");
    for(var key in root) {
      var value = root[key];
      var type = typeof(value);
      
      // String, numbers or Java objects use Symbols.create() directly
      if(type == "string" || type == "number" || isJava(value)) {
        soar.wmes.add(id, key, value);
      }
      else if(isArray(value)) {
        // Arrays become multi-attributes ...
        value.forEach( arrayValue => {
          if(isJava(arrayValue) || typeof(arrayValue) != 'object'){
            soar.wmes.add(id, key, arrayValue);
          }
          else {
            soar.wmes.add(id, key, fromJavaScript(arrayValue, key[0]));
          }
        });
      }
      else {
        // JavaScript objects recurse...
        soar.wmes.add(id, key, fromJavaScript(value, key[0]));
      }
    }
    return id;
  }
  
  // For "onOutputCommand" map from name to callback function
  var outputHandlers = {};
  
  // Register for output events, and dispatch to handlers registered
  // with "onOutputCommand"
  onEvent(OUTPUT_EVENT, function(e) {
    var it = e.getInputOutput().getPendingCommands().iterator();
    while(it.hasNext()) {
      var command = it.next();
      var handler = outputHandlers[command.getAttribute().toString()];
      if(handler) {
        var result = handler(toJavaScript(command.getValue())) || "complete";
        InputWmes.add(e.getInputOutput(), command.getValue(), "status", result);
      }
    }
  });
  
  var wmes = {
    newId : function(letter) {
      return agent.getSymbols().createIdentifier(letter);
    },
    /**
     * Add an input wme and return it
     */
    add : function(id, attr, value) {
      if(value === undefined) {
        value = attr;
        attr = id;
        id = io.getInputLink();
      }
      return InputWmes.add(io, id, attr, value);
    },
    
    /**
     * Update an input wme and return its replacement
     */
    update : function(wme, value) {
      return InputWmes.update(wme, value);
    },
    
    /**
     * Remove an input wme. Equivalent to <code>wme.remove()</code>.
     * It's ok for wme to be null or undefined.
     */
    remove : function(wme) {
      if(wme) {
        wme.remove();
      }
    },
    
    /**
     * Convert a tree of WMEs from a particular identifier into a JavaScript
     * object. Does not handle multi-attributes
     *
     * @param root the root identifier to start at
     * @return a JavaScript object
     */
    toJavaScript : toJavaScript,
    
    /**
     * Convert a simple JavaScript object to WMEs with the following conventions:
     *
     * <ul>
     * <li>String, number, Java object - Converted according to org.jsoar.kernel.symbols.Symbols.create()
     * <li>Arrays - Converted to multi-attributes
     * <li>JavaScript objects - Converted to an identifier by recursively calling fromJavaScript()
     * </ul>
     *
     * Here's an example of putting a simple message on the input link:
     * 
     * <pre>
     * soar.wmes.add("message", soar.wmes.fromJavaScript({
     *   from : "Dave",
     *   to   : "Agent",
     *   id   : soar.integer(12345), // force integer instead of double
     *   content : {
     *      message : "Hello"
     *   }
     * }));
     * </pre>
     *
     * @param root The object to convert
     * @param letter Optional letter for the generated identifier
     * @return a new identifier
     */
    fromJavaScript : fromJavaScript,
  };
  
  return {
    agent : agent,
    wmes : wmes,
    
    /**
     * Helper function to force a value to a java long. This is necessary
     * because JavaScript only has doubles. Use this when creating symbols.
     *
     * @param value numeric value
     * @return a java.lang.Long
     */
    integer : function(value) {
      return Long.valueOf(value);
    },
    
    /**
     * Get the current working directory
     */
    pwd : function() {
      return agent.getInterpreter().eval("pwd");
    },
    
    /**
     * Print to the agent's console
     */
    print : function(s) {
      agent.getPrinter().print(s);
    },
    
    /**
     * Register a callback for when the engine is disposed.
     *
     * @param callback the callback function. Takes no arguments.
     */
    onDispose : function(callback) {
      disposers.unshift(callback);
      return callback;
    },
    
    /**
     * Register a callback function on an event
     *
     * @param eventClass Class name as string, or instance of java.lang.Class
     * @param callback the callback function. See SoarEventListener.onEvent().
     * @returns a function that can be called to unregister the listener
     */
    onEvent : onEvent,
    
    /**
     * Register a callback that fires once and then is unregistered
     * automatically. For example, to catch a single input event:
     *
     * <pre>
     * soar.forOneEvent(soar.onInput, function() {
     *    soar.print("First, and only, input event");
     * });
     * </pre>
     *
     * @param registerFunc Function to call that regsiters for an event and
     *    returns an unregister function. e.g. soar.onInput, etc.
     * @param callback the callback function. See onEvent()
     * @returns a function that can be called to unregister the listener
     */
    forOneEvent : function(registerFunc, callback) {
      var cleanup = undefined;
      cleanup = registerFunc(function(e){
        try {
          callback(e);
        }
        finally {
          cleanup();
        }
      });
      return cleanup;
    },

    /**
     * Register a callback function on input
     *
     * @param callback the callback function. See SoarEventListener.onEvent().
     * @returns a function that can be called to unregister the listener
     */
    onInput : function(callback) {
      return onEvent(INPUT_EVENT, callback);
    },
    
    /**
     * Register a callback function on input
     *
     * @param callback the callback function. See SoarEventListener.onEvent().
     * @returns a function that can be called to unregister the listener
     */
    onOutput : function(callback) {
      return onEvent(OUTPUT_EVENT, callback);
    },
    
    /**
     * Register a handler for a named output command. The WMEs of the command
     * are converted to a JavaScript object using soar.wmes.toJavaScript() and
     * passed to the callback function.
     *
     * @param name the name of the output command
     * @param callback callback function
     * @returns a function that can be called to unregister the listener
     */
    onOutputCommand : function(name, callback) {
      outputHandlers[name] = callback;
      return function() {
        delete outputHandlers[name];
      };
    },
    
    /**
     * Register a function to be called before init soar is called.
     *
     * @param callback the callback function
     * @returns a function that can be called to unregister the listener
     */
    onInitSoar : function(callback) {
      return onEvent("org.jsoar.kernel.events.BeforeInitSoarEvent", callback);
    },
    
    /**
     * Register a RHS function. Takes an options structure like this:
     *
     * {
     *   name            : string,                  // required
     *   minArguments    : integer,                 // optional, defaults to 0
     *   maxArguments    : integer,                 // optional, defaults to MAX_INTEGER
     *   mayBeStandalone : boolean,                 // optional, defaults to true
     *   mayBeValue      : boolean,                 // optional, defaults to true
     *   execute         : function(context, args), // required
     * }
     *
     * The execute function can return a value. It will be automatically 
     * converted to a symbol.
     *
     * @param options the options structure.
     * @returns a function that can be called to remove the RHS function
     */
    rhsFunction : function(options) {
      agent.getRhsFunctions().registerHandler(new RhsFunctionHandler({
        getName : function() { return options.name; },
        getMinArguments : function() { return options.minArguments ? options.minArguments : 0; },
        getMaxArguments : function() { return options.maxArguments || Integer.MAX_VALUE; },
        mayBeStandalone : function() { return options.mayBeStandalone !== undefined ? options.mayBeStandalone : true; },
        mayBeValue : function() { return options.mayBeValue !== undefined ? options.mayBeValue : true; },
        execute : function(context, args) {
          // Convert from Java list to JavaScript array...
          var jsArgs = [];
          var i = args.iterator();
          while(i.hasNext()) { jsArgs.push(Symbols.valueOf(i.next())); }
          
          // Call the function
          var result = options.execute(context, jsArgs);
          if(result) {
            // Convert to a symbol
            return Symbols.create(context.getSymbols(), result);
          }
          return null;
        } 
      }));
      
      var d = function() {
        agent.getRhsFunctions().unregisterHandler(options.name);
      }
      disposers.unshift(d);
      return d;
    }, 
    
    _dispose : dispose,
  }
})(_soar.getAgent()) : _soar;

/**
 * Called when the engine is disposed or reset...
 */
function soar_dispose() {
  soar._dispose();
}
