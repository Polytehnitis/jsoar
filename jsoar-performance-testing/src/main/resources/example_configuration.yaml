# This is an example configuration for the performance testing framework.
# This is a YAML file and conforms to the YAML 1.2 Specification.  You can
# use any YAML you want in this file and it will be parsed correctly.  We
# are using an actual YAML parser for this so you can even do fancy stuff
# like references in this file.

# Each setting name in here is case insensitive.
# You can also use spaces without escaping them.
# You must also use spaces instead of tabs unfortunately.

# This is the default settings block
# These are the default settings for each test.  If you do not specify a
# setting in a test, the setting will be grabbed from here.
# Each of these settings can also be specified on a per test basis including
# versions of CSoar to use!  The hard coded internal values for each of these
# are as follows:
# jsoarEnabled: False
# csoarEnabled: False
# csoarDirectories: []
# warmUpCount: 0
# runCount: 0
# decisionCycles: 0
# useseed: False
# seed: 1
# csvDirectory: ""
# jvmSettings: ""
# summaryFile: ""
#
# This means that if you do not specify one of these values in the default block
# below and you do not specify it in every test, it will use the values above
# instead.
defaultSettings:
    jsoarEnabled: TRUE
    csoarEnabled: FALSE
    csoarDirectories: [ '%USER_HOME%/SoarTutorial_9.6.0-Multiplatform_64bit/bin' ] # can list multiple versions of csoar to use. %USER_HOME% is correctly substituted.
    jsoarCoreJars: [ '%USER_HOME%/.m2/repository/com/soartech/jsoar-core/4.0.4-SNAPSHOT/jsoar-core-4.0.4-SNAPSHOT.jar' ] # can list multiple versions of jsoar to use. %USER_HOME% is correctly substituted.
    warmUpCount: 0
    runCount: 5
    decisionCycles: [ 0 ] # Magic Number.  Run a test until it halts
    useSeed: FALSE
    seed: 1
    csvDirectory: Test-Results
    jvmSettings: -Xmx2G

    # If you wish to debug the child performance testing framework JVM
    #jvmSettings: -Xmx2G -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005

    summaryFile: test-summaries.txt

tests:
#
# Here are some example tests.
#

# For each test you have to specify "test<N>" where <N> can be
# anything so long as the keys are unique (<N> can even be an
# empty string)!  You will get errors if the keys are not
# unique.  These may be silent!

# The general format is as follows:
# test<Unique Identifier>:
#     - name: <name>
#     - file: <file>
#
# And then any settings specific to this test.  You must have
# a name and a path and unique keys!  You must also include the
# space after the '-' (hyphen) and the ':' (colon).  The keys
# are case insensitive except for the test and unique identifier.

# Wait SNC
# Tests how fast raw decision cycles are
- name: wait-snc
  file: src/main/resources/APT/wait.soar
  settings:
    decisionCycles: [ 100, 10000 ]

# All Test
# Runs blocks world with tons of rules loaded into memory
- name: All Test
  file: src/main/resources/APT/all-test/all-test.soar
  settings:
    decisionCycles: [ 10000 ]

# Arithmetic
# Computes problems it makes up
- name: Arithmetic
  file: src/main/resources/APT/Arithmetic/arithmetic.soar
  settings:
    decisionCycles: [ 10000 ]

# Arithmetic Chunking
# Computes problems it makes up while also using chunking
- name: Arithmetic Chunking
  file: src/main/resources/APT/Arithmetic/arithmetic-chunking.soar
  settings:
    decisionCycles: [ 10000 ]

# Arithmetic SMem
# Computes problems it makes up while also using SMem
- name: Arithmetic SMem
  file: src/main/resources/APT/Arithmetic-smem/arithmetic.soar
  settings:
    decisionCycles: [ 10000 ]

# Count Test
# A series of 9 tests testing performance.  Ideally this
# would be split up into 9 separate tests.
- name: Count Test
  file: src/main/resources/APT/count-test-files/count-test.soar

##
## Factorization Stress Tests
##
## The following are a series of stress tests doing factorizations.
## Each of these brute forces factorizations up to 1,500.  This
## stress test can use:

### Pure Soar
### Chunking
### SMem
### EpMem
### SMem with Chunking
### EpMem with Chunking
### SMem and EpMem
### SMem and EpMem AND Chunking

# This brute forces the factors of every number.
# It finds a factor, divides the number, goes into
# a substate, and repeats until it finds all the factors.
# then it copies up all the factors.
- name: Pure Soar Factorization Stress Test
  file: src/main/resources/Stress Tests/SingleFileFactorizationStressTest.soar

# This is the pure Soar Factorization Stress Test
# but with Chunking enabled.
- name: Chunking Factorization Stress Test
  file: src/main/resources/Stress Tests/Chunking_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# EpMem to retrieve factors
- name: EpMem Factorization Stress Test
  file: src/main/resources/Stress Tests/EpMem_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# SMem to retrieve factors
- name: SMem Factorization Stress Test
  file: src/main/resources/Stress Tests/SMem_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# EpMem and SMem together.  EpMem for even numbers
# and SMem for odd numbers.  (Applies even to substates!)
- name: EpMem & SMem Factorization Stress Test
  file: src/main/resources/Stress Tests/EpMemSMem_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# both EpMem and Chunking.
- name: EpMem & Chunking Factorization Stress Test
  file: src/main/resources/Stress Tests/EpMemWithChunking_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# both SMem and Chunking.
- name: SMem & Chunking Factorization Stress Test
  file: src/main/resources/Stress Tests/SMemWithChunking_FactorizationStressTest.soar

# This is the Factorization Stress Test but using
# EpMem and SMem AND Chunking together.  EpMem for
# even numbers and SMem for odd numbers.  (Applies
# even to substates!)
- name: EpMem & SMem & Chunking Factorization Stress Test
  file: src/main/resources/Stress Tests/EpMemSMemChunking_FactorizationStressTest.soar
